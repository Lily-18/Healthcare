{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Movielens Case Study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All libraries imported\n"
     ]
    }
   ],
   "source": [
    "#import the library\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "print('All libraries imported')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Import the three datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>56</td>\n",
       "      <td>16</td>\n",
       "      <td>70072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>55117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>M</td>\n",
       "      <td>45</td>\n",
       "      <td>7</td>\n",
       "      <td>02460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>55455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6035</th>\n",
       "      <td>6036</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>32603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6036</th>\n",
       "      <td>6037</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>76006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6037</th>\n",
       "      <td>6038</td>\n",
       "      <td>F</td>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>14706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6038</th>\n",
       "      <td>6039</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>01060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6039</th>\n",
       "      <td>6040</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>11106</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6040 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      UserID Gender  Age  Occupation Zip-Code\n",
       "0          1      F    1          10    48067\n",
       "1          2      M   56          16    70072\n",
       "2          3      M   25          15    55117\n",
       "3          4      M   45           7    02460\n",
       "4          5      M   25          20    55455\n",
       "...      ...    ...  ...         ...      ...\n",
       "6035    6036      F   25          15    32603\n",
       "6036    6037      F   45           1    76006\n",
       "6037    6038      F   56           1    14706\n",
       "6038    6039      F   45           0    01060\n",
       "6039    6040      M   25           6    11106\n",
       "\n",
       "[6040 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user=pd.read_csv('users.dat',sep='::',names=['UserID','Gender','Age','Occupation','Zip-Code'],engine='python')\n",
    "df_user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Jumanji (1995)</td>\n",
       "      <td>Adventure|Children's|Fantasy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Grumpier Old Men (1995)</td>\n",
       "      <td>Comedy|Romance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Waiting to Exhale (1995)</td>\n",
       "      <td>Comedy|Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Father of the Bride Part II (1995)</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3878</th>\n",
       "      <td>3948</td>\n",
       "      <td>Meet the Parents (2000)</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3879</th>\n",
       "      <td>3949</td>\n",
       "      <td>Requiem for a Dream (2000)</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3880</th>\n",
       "      <td>3950</td>\n",
       "      <td>Tigerland (2000)</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3881</th>\n",
       "      <td>3951</td>\n",
       "      <td>Two Family House (2000)</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3882</th>\n",
       "      <td>3952</td>\n",
       "      <td>Contender, The (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3883 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MovieID                               Title  \\\n",
       "0           1                    Toy Story (1995)   \n",
       "1           2                      Jumanji (1995)   \n",
       "2           3             Grumpier Old Men (1995)   \n",
       "3           4            Waiting to Exhale (1995)   \n",
       "4           5  Father of the Bride Part II (1995)   \n",
       "...       ...                                 ...   \n",
       "3878     3948             Meet the Parents (2000)   \n",
       "3879     3949          Requiem for a Dream (2000)   \n",
       "3880     3950                    Tigerland (2000)   \n",
       "3881     3951             Two Family House (2000)   \n",
       "3882     3952               Contender, The (2000)   \n",
       "\n",
       "                            Genres  \n",
       "0      Animation|Children's|Comedy  \n",
       "1     Adventure|Children's|Fantasy  \n",
       "2                   Comedy|Romance  \n",
       "3                     Comedy|Drama  \n",
       "4                           Comedy  \n",
       "...                            ...  \n",
       "3878                        Comedy  \n",
       "3879                         Drama  \n",
       "3880                         Drama  \n",
       "3881                         Drama  \n",
       "3882                Drama|Thriller  \n",
       "\n",
       "[3883 rows x 3 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_movies=pd.read_csv('movies.dat',sep='::',names=['MovieID','Title','Genres'],engine='python')\n",
    "df_movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1193</td>\n",
       "      <td>5</td>\n",
       "      <td>978300760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>661</td>\n",
       "      <td>3</td>\n",
       "      <td>978302109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>914</td>\n",
       "      <td>3</td>\n",
       "      <td>978301968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3408</td>\n",
       "      <td>4</td>\n",
       "      <td>978300275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2355</td>\n",
       "      <td>5</td>\n",
       "      <td>978824291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000204</th>\n",
       "      <td>6040</td>\n",
       "      <td>1091</td>\n",
       "      <td>1</td>\n",
       "      <td>956716541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000205</th>\n",
       "      <td>6040</td>\n",
       "      <td>1094</td>\n",
       "      <td>5</td>\n",
       "      <td>956704887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000206</th>\n",
       "      <td>6040</td>\n",
       "      <td>562</td>\n",
       "      <td>5</td>\n",
       "      <td>956704746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000207</th>\n",
       "      <td>6040</td>\n",
       "      <td>1096</td>\n",
       "      <td>4</td>\n",
       "      <td>956715648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000208</th>\n",
       "      <td>6040</td>\n",
       "      <td>1097</td>\n",
       "      <td>4</td>\n",
       "      <td>956715569</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000209 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         UserID  MovieID  Rating  Timestamp\n",
       "0             1     1193       5  978300760\n",
       "1             1      661       3  978302109\n",
       "2             1      914       3  978301968\n",
       "3             1     3408       4  978300275\n",
       "4             1     2355       5  978824291\n",
       "...         ...      ...     ...        ...\n",
       "1000204    6040     1091       1  956716541\n",
       "1000205    6040     1094       5  956704887\n",
       "1000206    6040      562       5  956704746\n",
       "1000207    6040     1096       4  956715648\n",
       "1000208    6040     1097       4  956715569\n",
       "\n",
       "[1000209 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ratings=pd.read_csv('ratings.dat',sep='::',names=['UserID','MovieID','Rating','Timestamp'],engine='python')\n",
    "df_ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6040, 5)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000209, 4)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ratings.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3883, 3)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_movies.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create a new dataset [Master_Data] with the following columns MovieID Title UserID Age Gender Occupation Rating. (Hint: (i) Merge two tables at a time. (ii) Merge the tables using two primary keys MovieID & UserId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "      <th>UserID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>978237008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>978233496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>978225952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>978226474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000204</th>\n",
       "      <td>3952</td>\n",
       "      <td>Contender, The (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5812</td>\n",
       "      <td>4</td>\n",
       "      <td>992072099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000205</th>\n",
       "      <td>3952</td>\n",
       "      <td>Contender, The (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5831</td>\n",
       "      <td>3</td>\n",
       "      <td>986223125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000206</th>\n",
       "      <td>3952</td>\n",
       "      <td>Contender, The (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5837</td>\n",
       "      <td>4</td>\n",
       "      <td>1011902656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000207</th>\n",
       "      <td>3952</td>\n",
       "      <td>Contender, The (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5927</td>\n",
       "      <td>1</td>\n",
       "      <td>979852537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000208</th>\n",
       "      <td>3952</td>\n",
       "      <td>Contender, The (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5998</td>\n",
       "      <td>4</td>\n",
       "      <td>1001781044</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000209 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         MovieID                  Title                       Genres  UserID  \\\n",
       "0              1       Toy Story (1995)  Animation|Children's|Comedy       1   \n",
       "1              1       Toy Story (1995)  Animation|Children's|Comedy       6   \n",
       "2              1       Toy Story (1995)  Animation|Children's|Comedy       8   \n",
       "3              1       Toy Story (1995)  Animation|Children's|Comedy       9   \n",
       "4              1       Toy Story (1995)  Animation|Children's|Comedy      10   \n",
       "...          ...                    ...                          ...     ...   \n",
       "1000204     3952  Contender, The (2000)               Drama|Thriller    5812   \n",
       "1000205     3952  Contender, The (2000)               Drama|Thriller    5831   \n",
       "1000206     3952  Contender, The (2000)               Drama|Thriller    5837   \n",
       "1000207     3952  Contender, The (2000)               Drama|Thriller    5927   \n",
       "1000208     3952  Contender, The (2000)               Drama|Thriller    5998   \n",
       "\n",
       "         Rating   Timestamp  \n",
       "0             5   978824268  \n",
       "1             4   978237008  \n",
       "2             4   978233496  \n",
       "3             5   978225952  \n",
       "4             5   978226474  \n",
       "...         ...         ...  \n",
       "1000204       4   992072099  \n",
       "1000205       3   986223125  \n",
       "1000206       4  1011902656  \n",
       "1000207       1   979852537  \n",
       "1000208       4  1001781044  \n",
       "\n",
       "[1000209 rows x 6 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1) merging movies with ratings\n",
    "dfMovieRatings=df_movies.merge(df_ratings,on='MovieID')\n",
    "dfMovieRatings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "      <th>UserID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824268</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48</td>\n",
       "      <td>Pocahontas (1995)</td>\n",
       "      <td>Animation|Children's|Musical|Romance</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824351</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>Apollo 13 (1995)</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978301777</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>260</td>\n",
       "      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n",
       "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>978300760</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>527</td>\n",
       "      <td>Schindler's List (1993)</td>\n",
       "      <td>Drama|War</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824195</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000204</th>\n",
       "      <td>3513</td>\n",
       "      <td>Rules of Engagement (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5727</td>\n",
       "      <td>4</td>\n",
       "      <td>958489970</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000205</th>\n",
       "      <td>3535</td>\n",
       "      <td>American Psycho (2000)</td>\n",
       "      <td>Comedy|Horror|Thriller</td>\n",
       "      <td>5727</td>\n",
       "      <td>2</td>\n",
       "      <td>958489970</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000206</th>\n",
       "      <td>3536</td>\n",
       "      <td>Keeping the Faith (2000)</td>\n",
       "      <td>Comedy|Romance</td>\n",
       "      <td>5727</td>\n",
       "      <td>5</td>\n",
       "      <td>958489902</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000207</th>\n",
       "      <td>3555</td>\n",
       "      <td>U-571 (2000)</td>\n",
       "      <td>Action|Thriller</td>\n",
       "      <td>5727</td>\n",
       "      <td>3</td>\n",
       "      <td>958490699</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000208</th>\n",
       "      <td>3578</td>\n",
       "      <td>Gladiator (2000)</td>\n",
       "      <td>Action|Drama</td>\n",
       "      <td>5727</td>\n",
       "      <td>5</td>\n",
       "      <td>958490171</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000209 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         MovieID                                      Title  \\\n",
       "0              1                           Toy Story (1995)   \n",
       "1             48                          Pocahontas (1995)   \n",
       "2            150                           Apollo 13 (1995)   \n",
       "3            260  Star Wars: Episode IV - A New Hope (1977)   \n",
       "4            527                    Schindler's List (1993)   \n",
       "...          ...                                        ...   \n",
       "1000204     3513                 Rules of Engagement (2000)   \n",
       "1000205     3535                     American Psycho (2000)   \n",
       "1000206     3536                   Keeping the Faith (2000)   \n",
       "1000207     3555                               U-571 (2000)   \n",
       "1000208     3578                           Gladiator (2000)   \n",
       "\n",
       "                                       Genres  UserID  Rating  Timestamp  \\\n",
       "0                 Animation|Children's|Comedy       1       5  978824268   \n",
       "1        Animation|Children's|Musical|Romance       1       5  978824351   \n",
       "2                                       Drama       1       5  978301777   \n",
       "3             Action|Adventure|Fantasy|Sci-Fi       1       4  978300760   \n",
       "4                                   Drama|War       1       5  978824195   \n",
       "...                                       ...     ...     ...        ...   \n",
       "1000204                        Drama|Thriller    5727       4  958489970   \n",
       "1000205                Comedy|Horror|Thriller    5727       2  958489970   \n",
       "1000206                        Comedy|Romance    5727       5  958489902   \n",
       "1000207                       Action|Thriller    5727       3  958490699   \n",
       "1000208                          Action|Drama    5727       5  958490171   \n",
       "\n",
       "        Gender  Age  Occupation Zip-Code  \n",
       "0            F    1          10    48067  \n",
       "1            F    1          10    48067  \n",
       "2            F    1          10    48067  \n",
       "3            F    1          10    48067  \n",
       "4            F    1          10    48067  \n",
       "...        ...  ...         ...      ...  \n",
       "1000204      M   25           4    92843  \n",
       "1000205      M   25           4    92843  \n",
       "1000206      M   25           4    92843  \n",
       "1000207      M   25           4    92843  \n",
       "1000208      M   25           4    92843  \n",
       "\n",
       "[1000209 rows x 10 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2) merging the above output with user file. Creating the master dataframe.\n",
    "dfMaster=dfMovieRatings.merge(df_user,on='UserID')\n",
    "dfMaster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# saving the data to new CSV file. \n",
    "dfMaster.to_csv('Master Movie data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check the missing values.\n",
    "dfMaster.isnull().sum().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### There are no missing values as the output is in boolean and showing false."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the datasets using visual representations (graphs or tables), also include your comments on the following:\n",
    "User Age Distribution      \n",
    "User rating of the movie “Toy Story”     \n",
    "Top 25 movies by viewership rating       \n",
    "Find the ratings for all the movies reviewed by for a particular user of user id = 2696     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1) user age distribution\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MovieID', 'Title', 'Genres', 'UserID', 'Rating', 'Timestamp', 'Gender',\n",
       "       'Age', 'Occupation', 'Zip-Code'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Value\tDescription(from the question)\n",
    "1\t\"Under 18\"\n",
    "18\t\"18-24\"\n",
    "25\t\"25-34\"\n",
    "35\t\"35-44\"\n",
    "45\t\"45-49\"\n",
    "50\t\"50-55\"\n",
    "56\t\"56+\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25    395556\n",
       "35    199003\n",
       "18    183536\n",
       "45     83633\n",
       "50     72490\n",
       "56     38780\n",
       "1      27211\n",
       "Name: Age, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#numeric\n",
    "#graph\n",
    "dfMaster['Age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fa1e6dfbe10>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(dfMaster['Age'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### From this graph we can depict that the age group 25(25-34) have the highest number of counts which is followed by the age group 35(35-44) and age goup 18(18-24). The least count is seen in the age group 1(Below 18). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfMaster['Age'].value_counts().plot(kind='bar')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Count')\n",
    "plt.title('User Age Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this bar graph we can depict that the age group 25(25-34) have the highest number of counts which is followed by the age group 35(35-44) and age goup 18(18-24). The least count is seen in the age group 1(Below 18)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## User rating of the movie “Toy Story”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                                      Toy Story (1995)\n",
       "1                                     Pocahontas (1995)\n",
       "2                                      Apollo 13 (1995)\n",
       "3             Star Wars: Episode IV - A New Hope (1977)\n",
       "4                               Schindler's List (1993)\n",
       "5                             Secret Garden, The (1993)\n",
       "6                                        Aladdin (1992)\n",
       "7                Snow White and the Seven Dwarfs (1937)\n",
       "8                           Beauty and the Beast (1991)\n",
       "9                                          Fargo (1996)\n",
       "10                     James and the Giant Peach (1996)\n",
       "11    Wallace & Gromit: The Best of Aardman Animatio...\n",
       "12                                Close Shave, A (1995)\n",
       "13                  Hunchback of Notre Dame, The (1996)\n",
       "14                                  My Fair Lady (1964)\n",
       "15                             Wizard of Oz, The (1939)\n",
       "16                                          Gigi (1958)\n",
       "17                                    Cinderella (1950)\n",
       "18                                  Mary Poppins (1964)\n",
       "19                                         Dumbo (1941)\n",
       "20                           Sound of Music, The (1965)\n",
       "21                    E.T. the Extra-Terrestrial (1982)\n",
       "22               One Flew Over the Cuckoo's Nest (1975)\n",
       "23                           Princess Bride, The (1987)\n",
       "24                         To Kill a Mockingbird (1962)\n",
       "25                            Dead Poets Society (1989)\n",
       "26                            Back to the Future (1985)\n",
       "27                                       Ben-Hur (1959)\n",
       "28                                       Ponette (1996)\n",
       "29                                      Hercules (1997)\n",
       "30                                       Titanic (1997)\n",
       "31                       Last Days of Disco, The (1998)\n",
       "32                                         Mulan (1998)\n",
       "33                                      Rain Man (1988)\n",
       "34                            Driving Miss Daisy (1989)\n",
       "35                                         Bambi (1942)\n",
       "36                           Saving Private Ryan (1998)\n",
       "37                                          Antz (1998)\n",
       "38                                 Pleasantville (1998)\n",
       "39                                Meet Joe Black (1998)\n",
       "40                                 Bug's Life, A (1998)\n",
       "41                        Miracle on 34th Street (1947)\n",
       "42                                        Tarzan (1999)\n",
       "43                     Run Lola Run (Lola rennt) (1998)\n",
       "44                              Sixth Sense, The (1999)\n",
       "45                                     Airplane! (1980)\n",
       "46                                           Big (1988)\n",
       "47                            Christmas Story, A (1983)\n",
       "48                      Ferris Bueller's Day Off (1986)\n",
       "49                                    Awakenings (1990)\n",
       "Name: Title, dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster['Title'].head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#extract all toy story movies\n",
    "toystory=dfMaster[dfMaster['Title'].str.contains('Toy Story')==True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "      <th>UserID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824268</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>3114</td>\n",
       "      <td>Toy Story 2 (1999)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>978302174</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>978237008</td>\n",
       "      <td>F</td>\n",
       "      <td>50</td>\n",
       "      <td>9</td>\n",
       "      <td>55117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>978233496</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>12</td>\n",
       "      <td>11413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>978225952</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>17</td>\n",
       "      <td>61614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998988</th>\n",
       "      <td>3114</td>\n",
       "      <td>Toy Story 2 (1999)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>3023</td>\n",
       "      <td>4</td>\n",
       "      <td>970471948</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>92108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999027</th>\n",
       "      <td>3114</td>\n",
       "      <td>Toy Story 2 (1999)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>5800</td>\n",
       "      <td>5</td>\n",
       "      <td>958015250</td>\n",
       "      <td>M</td>\n",
       "      <td>35</td>\n",
       "      <td>18</td>\n",
       "      <td>90804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999486</th>\n",
       "      <td>3114</td>\n",
       "      <td>Toy Story 2 (1999)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>2189</td>\n",
       "      <td>4</td>\n",
       "      <td>974607816</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>60148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999869</th>\n",
       "      <td>3114</td>\n",
       "      <td>Toy Story 2 (1999)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>159</td>\n",
       "      <td>4</td>\n",
       "      <td>989966944</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>37922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000192</th>\n",
       "      <td>3114</td>\n",
       "      <td>Toy Story 2 (1999)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>5727</td>\n",
       "      <td>5</td>\n",
       "      <td>958492554</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3662 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         MovieID               Title                       Genres  UserID  \\\n",
       "0              1    Toy Story (1995)  Animation|Children's|Comedy       1   \n",
       "50          3114  Toy Story 2 (1999)  Animation|Children's|Comedy       1   \n",
       "53             1    Toy Story (1995)  Animation|Children's|Comedy       6   \n",
       "124            1    Toy Story (1995)  Animation|Children's|Comedy       8   \n",
       "263            1    Toy Story (1995)  Animation|Children's|Comedy       9   \n",
       "...          ...                 ...                          ...     ...   \n",
       "998988      3114  Toy Story 2 (1999)  Animation|Children's|Comedy    3023   \n",
       "999027      3114  Toy Story 2 (1999)  Animation|Children's|Comedy    5800   \n",
       "999486      3114  Toy Story 2 (1999)  Animation|Children's|Comedy    2189   \n",
       "999869      3114  Toy Story 2 (1999)  Animation|Children's|Comedy     159   \n",
       "1000192     3114  Toy Story 2 (1999)  Animation|Children's|Comedy    5727   \n",
       "\n",
       "         Rating  Timestamp Gender  Age  Occupation Zip-Code  \n",
       "0             5  978824268      F    1          10    48067  \n",
       "50            4  978302174      F    1          10    48067  \n",
       "53            4  978237008      F   50           9    55117  \n",
       "124           4  978233496      M   25          12    11413  \n",
       "263           5  978225952      M   25          17    61614  \n",
       "...         ...        ...    ...  ...         ...      ...  \n",
       "998988        4  970471948      F   25           7    92108  \n",
       "999027        5  958015250      M   35          18    90804  \n",
       "999486        4  974607816      M    1          10    60148  \n",
       "999869        4  989966944      F   45           0    37922  \n",
       "1000192       5  958492554      M   25           4    92843  \n",
       "\n",
       "[3662 rows x 10 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "toystory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Title               Rating\n",
       "Toy Story (1995)    1          16\n",
       "                    2          61\n",
       "                    3         345\n",
       "                    4         835\n",
       "                    5         820\n",
       "Toy Story 2 (1999)  1          25\n",
       "                    2          44\n",
       "                    3         214\n",
       "                    4         578\n",
       "                    5         724\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# doing groupby (Title and rating) from toystory to get the count\n",
    "toystory.groupby(['Title','Rating']).size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Title,Rating'>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#stacked(to get each rating individually with the movie)\n",
    "toystory.groupby(['Title','Rating']).size().plot(kind='barh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# unstacked (aggregation of the movie and the showing different ratings)\n",
    "toystory.groupby(['Title','Rating']).size().unstack().plot(kind='barh')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### From the graph we can depict that both the movies were really popular as it got five or four ratings mostly. also, toy story was most rated among the two movies."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3) Top 25 movies by viewership rating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Title\n",
       "American Beauty (1999)                                   3428\n",
       "Star Wars: Episode IV - A New Hope (1977)                2991\n",
       "Star Wars: Episode V - The Empire Strikes Back (1980)    2990\n",
       "Star Wars: Episode VI - Return of the Jedi (1983)        2883\n",
       "Jurassic Park (1993)                                     2672\n",
       "Saving Private Ryan (1998)                               2653\n",
       "Terminator 2: Judgment Day (1991)                        2649\n",
       "Matrix, The (1999)                                       2590\n",
       "Back to the Future (1985)                                2583\n",
       "Silence of the Lambs, The (1991)                         2578\n",
       "Men in Black (1997)                                      2538\n",
       "Raiders of the Lost Ark (1981)                           2514\n",
       "Fargo (1996)                                             2513\n",
       "Sixth Sense, The (1999)                                  2459\n",
       "Braveheart (1995)                                        2443\n",
       "Shakespeare in Love (1998)                               2369\n",
       "Princess Bride, The (1987)                               2318\n",
       "Schindler's List (1993)                                  2304\n",
       "L.A. Confidential (1997)                                 2288\n",
       "Groundhog Day (1993)                                     2278\n",
       "E.T. the Extra-Terrestrial (1982)                        2269\n",
       "Star Wars: Episode I - The Phantom Menace (1999)         2250\n",
       "Being John Malkovich (1999)                              2241\n",
       "Shawshank Redemption, The (1994)                         2227\n",
       "Godfather, The (1972)                                    2223\n",
       "dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfTop25=dfMaster.groupby('Title').size().sort_values(ascending=False)[:25]\n",
    "dfTop25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Title'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#create horizontal bar chart \n",
    "plt.figure(figsize=(10,7))\n",
    "dfTop25.plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The most popular movie was American Beauty(1999) which got ratings almost 3500, followed by star wars with almost 3000 ratings."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4)Find the ratings for all the movies reviewed by for a particular user of user id = 2696"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "      <th>UserID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>991035</th>\n",
       "      <td>350</td>\n",
       "      <td>Client, The (1994)</td>\n",
       "      <td>Drama|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>3</td>\n",
       "      <td>973308886</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991036</th>\n",
       "      <td>800</td>\n",
       "      <td>Lone Star (1996)</td>\n",
       "      <td>Drama|Mystery</td>\n",
       "      <td>2696</td>\n",
       "      <td>5</td>\n",
       "      <td>973308842</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991037</th>\n",
       "      <td>1092</td>\n",
       "      <td>Basic Instinct (1992)</td>\n",
       "      <td>Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308886</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991038</th>\n",
       "      <td>1097</td>\n",
       "      <td>E.T. the Extra-Terrestrial (1982)</td>\n",
       "      <td>Children's|Drama|Fantasy|Sci-Fi</td>\n",
       "      <td>2696</td>\n",
       "      <td>3</td>\n",
       "      <td>973308690</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991039</th>\n",
       "      <td>1258</td>\n",
       "      <td>Shining, The (1980)</td>\n",
       "      <td>Horror</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308710</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991040</th>\n",
       "      <td>1270</td>\n",
       "      <td>Back to the Future (1985)</td>\n",
       "      <td>Comedy|Sci-Fi</td>\n",
       "      <td>2696</td>\n",
       "      <td>2</td>\n",
       "      <td>973308676</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991041</th>\n",
       "      <td>1589</td>\n",
       "      <td>Cop Land (1997)</td>\n",
       "      <td>Crime|Drama|Mystery</td>\n",
       "      <td>2696</td>\n",
       "      <td>3</td>\n",
       "      <td>973308865</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991042</th>\n",
       "      <td>1617</td>\n",
       "      <td>L.A. Confidential (1997)</td>\n",
       "      <td>Crime|Film-Noir|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308842</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991043</th>\n",
       "      <td>1625</td>\n",
       "      <td>Game, The (1997)</td>\n",
       "      <td>Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308842</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991044</th>\n",
       "      <td>1644</td>\n",
       "      <td>I Know What You Did Last Summer (1997)</td>\n",
       "      <td>Horror|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>2</td>\n",
       "      <td>973308920</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991045</th>\n",
       "      <td>1645</td>\n",
       "      <td>Devil's Advocate, The (1997)</td>\n",
       "      <td>Crime|Horror|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308904</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991046</th>\n",
       "      <td>1711</td>\n",
       "      <td>Midnight in the Garden of Good and Evil (1997)</td>\n",
       "      <td>Comedy|Crime|Drama|Mystery</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308904</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991047</th>\n",
       "      <td>1783</td>\n",
       "      <td>Palmetto (1998)</td>\n",
       "      <td>Film-Noir|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308865</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991048</th>\n",
       "      <td>1805</td>\n",
       "      <td>Wild Things (1998)</td>\n",
       "      <td>Crime|Drama|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308886</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991049</th>\n",
       "      <td>1892</td>\n",
       "      <td>Perfect Murder, A (1998)</td>\n",
       "      <td>Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308904</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991050</th>\n",
       "      <td>2338</td>\n",
       "      <td>I Still Know What You Did Last Summer (1998)</td>\n",
       "      <td>Horror|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>2</td>\n",
       "      <td>973308920</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991051</th>\n",
       "      <td>2389</td>\n",
       "      <td>Psycho (1998)</td>\n",
       "      <td>Crime|Horror|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308710</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991052</th>\n",
       "      <td>2713</td>\n",
       "      <td>Lake Placid (1999)</td>\n",
       "      <td>Horror|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>1</td>\n",
       "      <td>973308710</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991053</th>\n",
       "      <td>3176</td>\n",
       "      <td>Talented Mr. Ripley, The (1999)</td>\n",
       "      <td>Drama|Mystery|Thriller</td>\n",
       "      <td>2696</td>\n",
       "      <td>4</td>\n",
       "      <td>973308865</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991054</th>\n",
       "      <td>3386</td>\n",
       "      <td>JFK (1991)</td>\n",
       "      <td>Drama|Mystery</td>\n",
       "      <td>2696</td>\n",
       "      <td>1</td>\n",
       "      <td>973308842</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>24210</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        MovieID                                           Title  \\\n",
       "991035      350                              Client, The (1994)   \n",
       "991036      800                                Lone Star (1996)   \n",
       "991037     1092                           Basic Instinct (1992)   \n",
       "991038     1097               E.T. the Extra-Terrestrial (1982)   \n",
       "991039     1258                             Shining, The (1980)   \n",
       "991040     1270                       Back to the Future (1985)   \n",
       "991041     1589                                 Cop Land (1997)   \n",
       "991042     1617                        L.A. Confidential (1997)   \n",
       "991043     1625                                Game, The (1997)   \n",
       "991044     1644          I Know What You Did Last Summer (1997)   \n",
       "991045     1645                    Devil's Advocate, The (1997)   \n",
       "991046     1711  Midnight in the Garden of Good and Evil (1997)   \n",
       "991047     1783                                 Palmetto (1998)   \n",
       "991048     1805                              Wild Things (1998)   \n",
       "991049     1892                        Perfect Murder, A (1998)   \n",
       "991050     2338    I Still Know What You Did Last Summer (1998)   \n",
       "991051     2389                                   Psycho (1998)   \n",
       "991052     2713                              Lake Placid (1999)   \n",
       "991053     3176                 Talented Mr. Ripley, The (1999)   \n",
       "991054     3386                                      JFK (1991)   \n",
       "\n",
       "                                  Genres  UserID  Rating  Timestamp Gender  \\\n",
       "991035            Drama|Mystery|Thriller    2696       3  973308886      M   \n",
       "991036                     Drama|Mystery    2696       5  973308842      M   \n",
       "991037                  Mystery|Thriller    2696       4  973308886      M   \n",
       "991038   Children's|Drama|Fantasy|Sci-Fi    2696       3  973308690      M   \n",
       "991039                            Horror    2696       4  973308710      M   \n",
       "991040                     Comedy|Sci-Fi    2696       2  973308676      M   \n",
       "991041               Crime|Drama|Mystery    2696       3  973308865      M   \n",
       "991042  Crime|Film-Noir|Mystery|Thriller    2696       4  973308842      M   \n",
       "991043                  Mystery|Thriller    2696       4  973308842      M   \n",
       "991044           Horror|Mystery|Thriller    2696       2  973308920      M   \n",
       "991045     Crime|Horror|Mystery|Thriller    2696       4  973308904      M   \n",
       "991046        Comedy|Crime|Drama|Mystery    2696       4  973308904      M   \n",
       "991047        Film-Noir|Mystery|Thriller    2696       4  973308865      M   \n",
       "991048      Crime|Drama|Mystery|Thriller    2696       4  973308886      M   \n",
       "991049                  Mystery|Thriller    2696       4  973308904      M   \n",
       "991050           Horror|Mystery|Thriller    2696       2  973308920      M   \n",
       "991051             Crime|Horror|Thriller    2696       4  973308710      M   \n",
       "991052                   Horror|Thriller    2696       1  973308710      M   \n",
       "991053            Drama|Mystery|Thriller    2696       4  973308865      M   \n",
       "991054                     Drama|Mystery    2696       1  973308842      M   \n",
       "\n",
       "        Age  Occupation Zip-Code  \n",
       "991035   25           7    24210  \n",
       "991036   25           7    24210  \n",
       "991037   25           7    24210  \n",
       "991038   25           7    24210  \n",
       "991039   25           7    24210  \n",
       "991040   25           7    24210  \n",
       "991041   25           7    24210  \n",
       "991042   25           7    24210  \n",
       "991043   25           7    24210  \n",
       "991044   25           7    24210  \n",
       "991045   25           7    24210  \n",
       "991046   25           7    24210  \n",
       "991047   25           7    24210  \n",
       "991048   25           7    24210  \n",
       "991049   25           7    24210  \n",
       "991050   25           7    24210  \n",
       "991051   25           7    24210  \n",
       "991052   25           7    24210  \n",
       "991053   25           7    24210  \n",
       "991054   25           7    24210  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2696R=dfMaster[dfMaster['UserID']==2696]\n",
    "df_2696R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 10)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2696R=dfMaster[dfMaster['UserID']==2696].shape\n",
    "df_2696R"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering:\n",
    "            Use column genres:\n",
    "\n",
    "1.Find out all the unique genres (Hint: split the data in column genre making a list and then process the data to find out only the unique categories of genres)  \n",
    "2.Create a separate column for each genre category with a one-hot encoding ( 1 and 0) whether or not the movie belongs to that genre.   \n",
    "3.Determine the features affecting the ratings of any particular movie.  \n",
    "4.Develop an appropriate model to predict the movie ratings  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.Find out all the unique genres (Hint: split the data in column genre making a list and then process the data to find out only the unique categories of genres)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([\"Animation|Children's|Comedy\",\n",
       "       \"Animation|Children's|Musical|Romance\", 'Drama',\n",
       "       'Action|Adventure|Fantasy|Sci-Fi', 'Drama|War', \"Children's|Drama\",\n",
       "       \"Animation|Children's|Comedy|Musical\",\n",
       "       \"Animation|Children's|Musical\", 'Crime|Drama|Thriller',\n",
       "       'Animation', 'Animation|Comedy|Thriller', 'Musical|Romance',\n",
       "       \"Adventure|Children's|Drama|Musical\", 'Musical',\n",
       "       \"Children's|Comedy|Musical\", \"Children's|Drama|Fantasy|Sci-Fi\",\n",
       "       'Action|Adventure|Comedy|Romance', 'Comedy|Sci-Fi',\n",
       "       'Action|Adventure|Drama',\n",
       "       \"Adventure|Animation|Children's|Comedy|Musical\", 'Drama|Romance',\n",
       "       \"Animation|Children's\", 'Action|Drama|War', 'Comedy', 'Romance',\n",
       "       'Action|Crime|Romance', 'Thriller', 'Comedy|Fantasy',\n",
       "       'Comedy|Drama', \"Children's|Comedy|Drama\", 'Drama|Musical',\n",
       "       'Drama|Romance|War|Western', 'Crime|Drama',\n",
       "       'Action|Comedy|Western', 'Action|Romance|Thriller', 'Western',\n",
       "       \"Children's|Comedy\", 'Adventure|Drama|Western', 'Comedy|Romance',\n",
       "       'Comedy|Drama|Romance', 'Drama|Romance|War',\n",
       "       \"Children's|Comedy|Western\",\n",
       "       \"Adventure|Animation|Children's|Musical\", 'Action|Romance',\n",
       "       'Action|Adventure|Romance|Sci-Fi|War', 'Comedy|Musical|Romance',\n",
       "       'Drama|Romance|Thriller', \"Adventure|Children's|Comedy\",\n",
       "       'Action|Adventure|Romance', \"Children's|Fantasy|Musical\",\n",
       "       \"Animation|Children's|Comedy|Musical|Romance\",\n",
       "       'Comedy|Fantasy|Romance', 'Action|Drama', 'Comedy|Musical',\n",
       "       'Action', 'Adventure|Drama|Romance|Sci-Fi', 'Action|Crime',\n",
       "       'Drama|Thriller', 'Drama|Sci-Fi', 'Action|Crime|Drama',\n",
       "       'Drama|Thriller|War', 'Drama|Horror', 'Action|Thriller',\n",
       "       'Action|Adventure|Thriller', 'Action|Adventure|Sci-Fi',\n",
       "       'Action|Sci-Fi|Thriller', 'Animation|Sci-Fi',\n",
       "       'Adventure|Animation|Sci-Fi|Thriller', 'Action|Drama|Romance',\n",
       "       'Action|Drama|Thriller|War', 'Action|Adventure|Comedy|Sci-Fi',\n",
       "       'Crime|Drama|Mystery', 'Drama|Sci-Fi|Thriller',\n",
       "       'Comedy|Crime|Drama|Mystery', 'Action|Comedy|Drama',\n",
       "       'Action|Crime|Thriller', \"Adventure|Children's|Drama\",\n",
       "       'Drama|Mystery', 'Action|Comedy|Sci-Fi|Thriller',\n",
       "       'Action|Adventure|Sci-Fi|Thriller',\n",
       "       'Action|Drama|Romance|Thriller', 'Crime|Thriller', 'Documentary',\n",
       "       'Comedy|Crime|Fantasy', 'Animation|Comedy', 'Comedy|Crime',\n",
       "       'Crime|Film-Noir|Mystery|Thriller', 'Sci-Fi|Thriller',\n",
       "       'Action|Sci-Fi', 'Horror|Sci-Fi|Thriller',\n",
       "       \"Adventure|Children's|Fantasy\", 'Action|Adventure|Comedy|Crime',\n",
       "       'Action|Adventure', 'Action|Drama|Thriller',\n",
       "       \"Children's|Comedy|Fantasy\", 'Comedy|Romance|War',\n",
       "       'Film-Noir|Sci-Fi', 'Comedy|Romance|Thriller',\n",
       "       'Action|Adventure|Crime|Drama', 'Action|Adventure|Mystery',\n",
       "       'Action|Adventure|Fantasy', 'Sci-Fi|War', 'Action|Sci-Fi|War',\n",
       "       'Mystery|Thriller', 'Film-Noir|Mystery',\n",
       "       'Drama|Mystery|Sci-Fi|Thriller', 'Action|Adventure|Romance|War',\n",
       "       \"Adventure|Children's\", \"Adventure|Children's|Fantasy|Sci-Fi\",\n",
       "       \"Adventure|Children's|Musical\",\n",
       "       \"Adventure|Children's|Comedy|Fantasy\",\n",
       "       'Action|Adventure|Drama|Sci-Fi|War', 'Action|Sci-Fi|Thriller|War',\n",
       "       'Action|Western', 'Adventure|War', 'Action|Horror|Sci-Fi|Thriller',\n",
       "       'Action|Adventure|Comedy|Horror|Sci-Fi', 'Action|Comedy|Musical',\n",
       "       'Film-Noir|Mystery|Thriller', 'Adventure', 'Comedy|War',\n",
       "       'Adventure|Comedy|Drama', 'Comedy|Mystery|Thriller',\n",
       "       'Comedy|Horror', 'Horror|Romance', 'Horror', 'Action|Horror',\n",
       "       'Action|Romance|War', \"Children's|Fantasy\",\n",
       "       \"Children's|Drama|Fantasy\", 'Action|Adventure|Sci-Fi|War',\n",
       "       'Action|Horror|Sci-Fi', 'Action|Comedy|Crime|Drama', 'War',\n",
       "       'Comedy|Sci-Fi|Western', 'Fantasy|Sci-Fi',\n",
       "       \"Action|Adventure|Children's|Comedy\",\n",
       "       \"Adventure|Children's|Drama|Romance\",\n",
       "       \"Adventure|Children's|Sci-Fi\", \"Children's\",\n",
       "       \"Adventure|Children's|Comedy|Fantasy|Sci-Fi\",\n",
       "       \"Animation|Children's|Fantasy|Musical\", \"Children's|Sci-Fi\",\n",
       "       'Adventure|Comedy', 'Adventure|Musical',\n",
       "       \"Animation|Children's|Drama|Fantasy\", \"Children's|Fantasy|Sci-Fi\",\n",
       "       'Drama|Fantasy', 'Action|Adventure|Horror|Thriller',\n",
       "       'Comedy|Horror|Musical|Sci-Fi', 'Comedy|Horror|Musical',\n",
       "       'Action|Horror|Thriller', 'Action|Drama|Fantasy|Romance',\n",
       "       'Adventure|Fantasy|Sci-Fi', 'Comedy|Drama|War',\n",
       "       'Comedy|Drama|Western', 'Adventure|Comedy|Sci-Fi',\n",
       "       \"Action|Children's|Fantasy\", 'Adventure|Fantasy', 'Comedy|Western',\n",
       "       'Crime|Drama|Sci-Fi', 'Adventure|Sci-Fi', 'Adventure|Drama',\n",
       "       'Action|Adventure|Drama|Romance', 'Action|Comedy|Musical|Sci-Fi',\n",
       "       'Action|Adventure|Crime', 'Action|Comedy|War', 'Action|Comedy',\n",
       "       'Comedy|Crime|Horror', \"Action|Adventure|Children's|Sci-Fi\",\n",
       "       'Action|Adventure|Comedy', 'Action|Adventure|Romance|Thriller',\n",
       "       'Film-Noir|Thriller', 'Action|Comedy|Sci-Fi|War',\n",
       "       'Comedy|Crime|Mystery|Thriller', \"Action|Children's\",\n",
       "       'Crime|Drama|Mystery|Thriller', 'Action|Drama|Sci-Fi|Thriller',\n",
       "       \"Children's|Musical\", \"Adventure|Animation|Children's|Sci-Fi\",\n",
       "       'Adventure|Fantasy|Romance', 'Action|Adventure|Horror',\n",
       "       'Action|Comedy|Fantasy', 'Animation|Musical', 'Action|War',\n",
       "       'Comedy|Crime|Thriller', 'Action|Sci-Fi|Western',\n",
       "       'Adventure|Animation|Film-Noir', 'Adventure|Romance|Sci-Fi',\n",
       "       'Adventure|Drama|Thriller', 'Adventure|Western',\n",
       "       'Action|Crime|Sci-Fi', 'Sci-Fi', 'Horror|Thriller',\n",
       "       'Action|Adventure|Comedy|Horror', 'Horror|Sci-Fi',\n",
       "       'Action|Mystery|Romance|Thriller', 'Horror|Mystery|Thriller',\n",
       "       'Crime|Horror|Mystery|Thriller', 'Mystery|Sci-Fi|Thriller',\n",
       "       'Comedy|Documentary', 'Action|Sci-Fi|Thriller|Western',\n",
       "       'Drama|Mystery|Thriller', 'Action|Romance|Sci-Fi',\n",
       "       'Action|Adventure|Animation', 'Adventure|Animation|Sci-Fi',\n",
       "       'Action|Comedy|Crime|Horror|Thriller',\n",
       "       'Crime|Drama|Romance|Thriller',\n",
       "       'Action|Adventure|Animation|Horror|Sci-Fi',\n",
       "       'Comedy|Fantasy|Romance|Sci-Fi', 'Comedy|Mystery|Romance|Thriller',\n",
       "       'Crime|Drama|Film-Noir', 'Crime|Film-Noir|Thriller', 'Crime',\n",
       "       'Film-Noir|Sci-Fi|Thriller', 'Comedy|Thriller',\n",
       "       'Action|Crime|Drama|Thriller', 'Mystery|Sci-Fi',\n",
       "       'Action|Adventure|Sci-Fi|Thriller|War', 'Crime|Film-Noir',\n",
       "       'Adventure|Thriller', 'Mystery|Romance|Thriller',\n",
       "       'Comedy|Crime|Drama', 'Adventure|Crime|Sci-Fi|Thriller',\n",
       "       'Action|Adventure|Mystery|Sci-Fi', 'Action|Adventure|Western',\n",
       "       'Action|Drama|Mystery',\n",
       "       \"Adventure|Animation|Children's|Comedy|Fantasy\",\n",
       "       'Drama|Musical|War', 'Comedy|Mystery', 'Adventure|Sci-Fi|Thriller',\n",
       "       \"Children's|Comedy|Sci-Fi\", 'Adventure|Romance',\n",
       "       'Drama|Mystery|Romance', 'Adventure|Drama|Romance',\n",
       "       'Comedy|Drama|Sci-Fi', 'Romance|Thriller',\n",
       "       'Film-Noir|Romance|Thriller', 'Crime|Drama|Film-Noir|Thriller',\n",
       "       'Drama|Fantasy|Romance|Thriller',\n",
       "       'Action|Drama|Mystery|Romance|Thriller', 'Action|Thriller|War',\n",
       "       \"Animation|Children's|Fantasy|War\", 'Documentary|Musical',\n",
       "       'Adventure|Comedy|Romance', \"Adventure|Children's|Comedy|Musical\",\n",
       "       'Action|Mystery|Thriller', \"Children's|Horror\",\n",
       "       'Adventure|Musical|Romance', \"Children's|Comedy|Mystery\",\n",
       "       'Romance|War', 'Action|Comedy|Romance|Thriller',\n",
       "       'Musical|Romance|War', \"Animation|Children's|Comedy|Romance\",\n",
       "       'Comedy|Mystery|Romance', 'Action|Drama|Western',\n",
       "       \"Action|Animation|Children's|Sci-Fi|Thriller|War\",\n",
       "       'Comedy|Drama|Musical', 'Adventure|Comedy|Musical',\n",
       "       'Action|Crime|Mystery|Thriller', 'Action|Adventure|Drama|Thriller',\n",
       "       'Action|Adventure|Comedy|War', 'Mystery', 'Drama|Western',\n",
       "       'Action|Adventure|Crime|Thriller',\n",
       "       'Action|Mystery|Sci-Fi|Thriller',\n",
       "       \"Adventure|Children's|Comedy|Fantasy|Romance\",\n",
       "       \"Adventure|Children's|Romance\",\n",
       "       \"Action|Adventure|Animation|Children's|Fantasy\",\n",
       "       \"Action|Adventure|Children's\", \"Adventure|Animation|Children's\",\n",
       "       'Musical|War', 'Action|Crime|Mystery',\n",
       "       \"Adventure|Animation|Children's|Fantasy\", 'Comedy|Horror|Thriller',\n",
       "       'Film-Noir', 'Crime|Film-Noir|Mystery', 'Drama|Film-Noir|Thriller',\n",
       "       'Drama|Film-Noir', 'Action|Adventure|War', 'Crime|Drama|Romance',\n",
       "       'Documentary|War', 'Sci-Fi|Thriller|War', 'Action|Comedy|Crime',\n",
       "       'Crime|Horror', 'Drama|Romance|Sci-Fi', 'Crime|Mystery',\n",
       "       'Comedy|Drama|Thriller', 'Crime|Horror|Thriller', 'Horror|Mystery',\n",
       "       'Documentary|Drama', 'Drama|Horror|Thriller',\n",
       "       'Comedy|Horror|Sci-Fi', \"Action|Adventure|Children's|Fantasy\",\n",
       "       'Animation|Mystery', 'Comedy|Romance|Sci-Fi', 'Romance|Western',\n",
       "       'Drama|Romance|Western', 'Comedy|Film-Noir|Thriller',\n",
       "       'Film-Noir|Horror', 'Fantasy'], dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster['Genres'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                    [Animation, Children's, Comedy]\n",
       "1          [Animation, Children's, Musical, Romance]\n",
       "2                                            [Drama]\n",
       "3               [Action, Adventure, Fantasy, Sci-Fi]\n",
       "4                                       [Drama, War]\n",
       "                             ...                    \n",
       "1000204                            [Drama, Thriller]\n",
       "1000205                   [Comedy, Horror, Thriller]\n",
       "1000206                            [Comedy, Romance]\n",
       "1000207                           [Action, Thriller]\n",
       "1000208                              [Action, Drama]\n",
       "Name: Genres, Length: 1000209, dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#product name str split-\n",
    "dfGenres=dfMaster['Genres'].str.split('|')\n",
    "dfGenres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Action',\n",
       " 'Adventure',\n",
       " 'Animation',\n",
       " \"Children's\",\n",
       " 'Comedy',\n",
       " 'Crime',\n",
       " 'Documentary',\n",
       " 'Drama',\n",
       " 'Fantasy',\n",
       " 'Film-Noir',\n",
       " 'Horror',\n",
       " 'Musical',\n",
       " 'Mystery',\n",
       " 'Romance',\n",
       " 'Sci-Fi',\n",
       " 'Thriller',\n",
       " 'War',\n",
       " 'Western'}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#extracting unique data\n",
    "listgenres=set() #constructor way to create a set\n",
    "for genres in dfGenres:\n",
    "    listgenres=listgenres.union(set(genres))\n",
    "listgenres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(listgenres)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.Create a separate column for each genre category with a one-hot encoding ( 1 and 0) whether or not the movie belongs to that genre."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                   Animation|Children's|Comedy\n",
       "1          Animation|Children's|Musical|Romance\n",
       "2                                         Drama\n",
       "3               Action|Adventure|Fantasy|Sci-Fi\n",
       "4                                     Drama|War\n",
       "                           ...                 \n",
       "1000204                          Drama|Thriller\n",
       "1000205                  Comedy|Horror|Thriller\n",
       "1000206                          Comedy|Romance\n",
       "1000207                         Action|Thriller\n",
       "1000208                            Action|Drama\n",
       "Name: Genres, Length: 1000209, dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster['Genres']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Action</th>\n",
       "      <th>Adventure</th>\n",
       "      <th>Animation</th>\n",
       "      <th>Children's</th>\n",
       "      <th>Comedy</th>\n",
       "      <th>Crime</th>\n",
       "      <th>Documentary</th>\n",
       "      <th>Drama</th>\n",
       "      <th>Fantasy</th>\n",
       "      <th>Film-Noir</th>\n",
       "      <th>Horror</th>\n",
       "      <th>Musical</th>\n",
       "      <th>Mystery</th>\n",
       "      <th>Romance</th>\n",
       "      <th>Sci-Fi</th>\n",
       "      <th>Thriller</th>\n",
       "      <th>War</th>\n",
       "      <th>Western</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000204</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000205</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000206</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000207</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000208</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000209 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Action  Adventure  Animation  Children's  Comedy  Crime  Documentary  \\\n",
       "0             0          0          1           1       1      0            0   \n",
       "1             0          0          1           1       0      0            0   \n",
       "2             0          0          0           0       0      0            0   \n",
       "3             1          1          0           0       0      0            0   \n",
       "4             0          0          0           0       0      0            0   \n",
       "...         ...        ...        ...         ...     ...    ...          ...   \n",
       "1000204       0          0          0           0       0      0            0   \n",
       "1000205       0          0          0           0       1      0            0   \n",
       "1000206       0          0          0           0       1      0            0   \n",
       "1000207       1          0          0           0       0      0            0   \n",
       "1000208       1          0          0           0       0      0            0   \n",
       "\n",
       "         Drama  Fantasy  Film-Noir  Horror  Musical  Mystery  Romance  Sci-Fi  \\\n",
       "0            0        0          0       0        0        0        0       0   \n",
       "1            0        0          0       0        1        0        1       0   \n",
       "2            1        0          0       0        0        0        0       0   \n",
       "3            0        1          0       0        0        0        0       1   \n",
       "4            1        0          0       0        0        0        0       0   \n",
       "...        ...      ...        ...     ...      ...      ...      ...     ...   \n",
       "1000204      1        0          0       0        0        0        0       0   \n",
       "1000205      0        0          0       1        0        0        0       0   \n",
       "1000206      0        0          0       0        0        0        1       0   \n",
       "1000207      0        0          0       0        0        0        0       0   \n",
       "1000208      1        0          0       0        0        0        0       0   \n",
       "\n",
       "         Thriller  War  Western  \n",
       "0               0    0        0  \n",
       "1               0    0        0  \n",
       "2               0    0        0  \n",
       "3               0    0        0  \n",
       "4               0    1        0  \n",
       "...           ...  ...      ...  \n",
       "1000204         1    0        0  \n",
       "1000205         1    0        0  \n",
       "1000206         0    0        0  \n",
       "1000207         1    0        0  \n",
       "1000208         0    0        0  \n",
       "\n",
       "[1000209 rows x 18 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GenresOnehot=dfMaster['Genres'].str.get_dummies('|')\n",
    "GenresOnehot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "      <th>UserID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-Code</th>\n",
       "      <th>...</th>\n",
       "      <th>Fantasy</th>\n",
       "      <th>Film-Noir</th>\n",
       "      <th>Horror</th>\n",
       "      <th>Musical</th>\n",
       "      <th>Mystery</th>\n",
       "      <th>Romance</th>\n",
       "      <th>Sci-Fi</th>\n",
       "      <th>Thriller</th>\n",
       "      <th>War</th>\n",
       "      <th>Western</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824268</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48</td>\n",
       "      <td>Pocahontas (1995)</td>\n",
       "      <td>Animation|Children's|Musical|Romance</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824351</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>Apollo 13 (1995)</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978301777</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>260</td>\n",
       "      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n",
       "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>978300760</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>527</td>\n",
       "      <td>Schindler's List (1993)</td>\n",
       "      <td>Drama|War</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824195</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000204</th>\n",
       "      <td>3513</td>\n",
       "      <td>Rules of Engagement (2000)</td>\n",
       "      <td>Drama|Thriller</td>\n",
       "      <td>5727</td>\n",
       "      <td>4</td>\n",
       "      <td>958489970</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000205</th>\n",
       "      <td>3535</td>\n",
       "      <td>American Psycho (2000)</td>\n",
       "      <td>Comedy|Horror|Thriller</td>\n",
       "      <td>5727</td>\n",
       "      <td>2</td>\n",
       "      <td>958489970</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000206</th>\n",
       "      <td>3536</td>\n",
       "      <td>Keeping the Faith (2000)</td>\n",
       "      <td>Comedy|Romance</td>\n",
       "      <td>5727</td>\n",
       "      <td>5</td>\n",
       "      <td>958489902</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000207</th>\n",
       "      <td>3555</td>\n",
       "      <td>U-571 (2000)</td>\n",
       "      <td>Action|Thriller</td>\n",
       "      <td>5727</td>\n",
       "      <td>3</td>\n",
       "      <td>958490699</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000208</th>\n",
       "      <td>3578</td>\n",
       "      <td>Gladiator (2000)</td>\n",
       "      <td>Action|Drama</td>\n",
       "      <td>5727</td>\n",
       "      <td>5</td>\n",
       "      <td>958490171</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>92843</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000209 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         MovieID                                      Title  \\\n",
       "0              1                           Toy Story (1995)   \n",
       "1             48                          Pocahontas (1995)   \n",
       "2            150                           Apollo 13 (1995)   \n",
       "3            260  Star Wars: Episode IV - A New Hope (1977)   \n",
       "4            527                    Schindler's List (1993)   \n",
       "...          ...                                        ...   \n",
       "1000204     3513                 Rules of Engagement (2000)   \n",
       "1000205     3535                     American Psycho (2000)   \n",
       "1000206     3536                   Keeping the Faith (2000)   \n",
       "1000207     3555                               U-571 (2000)   \n",
       "1000208     3578                           Gladiator (2000)   \n",
       "\n",
       "                                       Genres  UserID  Rating  Timestamp  \\\n",
       "0                 Animation|Children's|Comedy       1       5  978824268   \n",
       "1        Animation|Children's|Musical|Romance       1       5  978824351   \n",
       "2                                       Drama       1       5  978301777   \n",
       "3             Action|Adventure|Fantasy|Sci-Fi       1       4  978300760   \n",
       "4                                   Drama|War       1       5  978824195   \n",
       "...                                       ...     ...     ...        ...   \n",
       "1000204                        Drama|Thriller    5727       4  958489970   \n",
       "1000205                Comedy|Horror|Thriller    5727       2  958489970   \n",
       "1000206                        Comedy|Romance    5727       5  958489902   \n",
       "1000207                       Action|Thriller    5727       3  958490699   \n",
       "1000208                          Action|Drama    5727       5  958490171   \n",
       "\n",
       "        Gender  Age  Occupation Zip-Code  ...  Fantasy  Film-Noir  Horror  \\\n",
       "0            F    1          10    48067  ...        0          0       0   \n",
       "1            F    1          10    48067  ...        0          0       0   \n",
       "2            F    1          10    48067  ...        0          0       0   \n",
       "3            F    1          10    48067  ...        1          0       0   \n",
       "4            F    1          10    48067  ...        0          0       0   \n",
       "...        ...  ...         ...      ...  ...      ...        ...     ...   \n",
       "1000204      M   25           4    92843  ...        0          0       0   \n",
       "1000205      M   25           4    92843  ...        0          0       1   \n",
       "1000206      M   25           4    92843  ...        0          0       0   \n",
       "1000207      M   25           4    92843  ...        0          0       0   \n",
       "1000208      M   25           4    92843  ...        0          0       0   \n",
       "\n",
       "         Musical  Mystery  Romance  Sci-Fi  Thriller  War  Western  \n",
       "0              0        0        0       0         0    0        0  \n",
       "1              1        0        1       0         0    0        0  \n",
       "2              0        0        0       0         0    0        0  \n",
       "3              0        0        0       1         0    0        0  \n",
       "4              0        0        0       0         0    1        0  \n",
       "...          ...      ...      ...     ...       ...  ...      ...  \n",
       "1000204        0        0        0       0         1    0        0  \n",
       "1000205        0        0        0       0         1    0        0  \n",
       "1000206        0        0        1       0         0    0        0  \n",
       "1000207        0        0        0       0         1    0        0  \n",
       "1000208        0        0        0       0         0    0        0  \n",
       "\n",
       "[1000209 rows x 28 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster1=pd.concat([dfMaster,GenresOnehot],axis=1)\n",
    "dfMaster1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.Determine the features affecting the ratings of any particular movie."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MovieID         int64\n",
       "Title          object\n",
       "Genres         object\n",
       "UserID          int64\n",
       "Rating          int64\n",
       "Timestamp       int64\n",
       "Gender         object\n",
       "Age             int64\n",
       "Occupation      int64\n",
       "Zip-Code       object\n",
       "Action          int64\n",
       "Adventure       int64\n",
       "Animation       int64\n",
       "Children's      int64\n",
       "Comedy          int64\n",
       "Crime           int64\n",
       "Documentary     int64\n",
       "Drama           int64\n",
       "Fantasy         int64\n",
       "Film-Noir       int64\n",
       "Horror          int64\n",
       "Musical         int64\n",
       "Mystery         int64\n",
       "Romance         int64\n",
       "Sci-Fi          int64\n",
       "Thriller        int64\n",
       "War             int64\n",
       "Western         int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster1.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          F\n",
       "1          F\n",
       "2          F\n",
       "3          F\n",
       "4          F\n",
       "          ..\n",
       "1000204    M\n",
       "1000205    M\n",
       "1000206    M\n",
       "1000207    M\n",
       "1000208    M\n",
       "Name: Gender, Length: 1000209, dtype: object"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster1['Gender']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M    753769\n",
       "F    246440\n",
       "Name: Gender, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster1['Gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfMaster1.groupby(['Gender','Rating']).size().unstack().plot(kind='bar',legend=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### gender is affecing the data since there are more male viewers than the female viewers. And the maximum rating is 4 in booth male and female."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25    395556\n",
       "35    199003\n",
       "18    183536\n",
       "45     83633\n",
       "50     72490\n",
       "56     38780\n",
       "1      27211\n",
       "Name: Age, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfMaster1['Age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfMaster1.groupby(['Age','Rating']).size().unstack().plot(kind='bar',legend=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Age group 25(25-34) have highest ratings amongst the all age group. And the rating 4 is mostly given by viewrs from all age group. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 2160x2160 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(30,30))\n",
    "dfMaster1.groupby(['Occupation','Rating']).size().unstack().plot(kind='bar',legend=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### People with no occupation(others and not specified and college grad) have highest number of ratings and they gave more ratings of 4."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Develop an appropriate model to predict the movie ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#all variables- required variable\n",
    "#new data with only 500 records\n",
    "new_data=dfMaster1[:500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genres</th>\n",
       "      <th>UserID</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-Code</th>\n",
       "      <th>...</th>\n",
       "      <th>Fantasy</th>\n",
       "      <th>Film-Noir</th>\n",
       "      <th>Horror</th>\n",
       "      <th>Musical</th>\n",
       "      <th>Mystery</th>\n",
       "      <th>Romance</th>\n",
       "      <th>Sci-Fi</th>\n",
       "      <th>Thriller</th>\n",
       "      <th>War</th>\n",
       "      <th>Western</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Toy Story (1995)</td>\n",
       "      <td>Animation|Children's|Comedy</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824268</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48</td>\n",
       "      <td>Pocahontas (1995)</td>\n",
       "      <td>Animation|Children's|Musical|Romance</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824351</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>Apollo 13 (1995)</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978301777</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>260</td>\n",
       "      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n",
       "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>978300760</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>527</td>\n",
       "      <td>Schindler's List (1993)</td>\n",
       "      <td>Drama|War</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>978824195</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>1197</td>\n",
       "      <td>Princess Bride, The (1987)</td>\n",
       "      <td>Action|Adventure|Comedy|Romance</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>979167660</td>\n",
       "      <td>F</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>95370</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>1198</td>\n",
       "      <td>Raiders of the Lost Ark (1981)</td>\n",
       "      <td>Action|Adventure</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>978225630</td>\n",
       "      <td>F</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>95370</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>1200</td>\n",
       "      <td>Aliens (1986)</td>\n",
       "      <td>Action|Sci-Fi|Thriller|War</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>979168160</td>\n",
       "      <td>F</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>95370</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1201</td>\n",
       "      <td>Good, The Bad and The Ugly, The (1966)</td>\n",
       "      <td>Action|Western</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>978225853</td>\n",
       "      <td>F</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>95370</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1203</td>\n",
       "      <td>12 Angry Men (1957)</td>\n",
       "      <td>Drama</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>979775159</td>\n",
       "      <td>F</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>95370</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     MovieID                                      Title  \\\n",
       "0          1                           Toy Story (1995)   \n",
       "1         48                          Pocahontas (1995)   \n",
       "2        150                           Apollo 13 (1995)   \n",
       "3        260  Star Wars: Episode IV - A New Hope (1977)   \n",
       "4        527                    Schindler's List (1993)   \n",
       "..       ...                                        ...   \n",
       "495     1197                 Princess Bride, The (1987)   \n",
       "496     1198             Raiders of the Lost Ark (1981)   \n",
       "497     1200                              Aliens (1986)   \n",
       "498     1201     Good, The Bad and The Ugly, The (1966)   \n",
       "499     1203                        12 Angry Men (1957)   \n",
       "\n",
       "                                   Genres  UserID  Rating  Timestamp Gender  \\\n",
       "0             Animation|Children's|Comedy       1       5  978824268      F   \n",
       "1    Animation|Children's|Musical|Romance       1       5  978824351      F   \n",
       "2                                   Drama       1       5  978301777      F   \n",
       "3         Action|Adventure|Fantasy|Sci-Fi       1       4  978300760      F   \n",
       "4                               Drama|War       1       5  978824195      F   \n",
       "..                                    ...     ...     ...        ...    ...   \n",
       "495       Action|Adventure|Comedy|Romance      10       5  979167660      F   \n",
       "496                      Action|Adventure      10       5  978225630      F   \n",
       "497            Action|Sci-Fi|Thriller|War      10       5  979168160      F   \n",
       "498                        Action|Western      10       2  978225853      F   \n",
       "499                                 Drama      10       3  979775159      F   \n",
       "\n",
       "     Age  Occupation Zip-Code  ...  Fantasy  Film-Noir  Horror  Musical  \\\n",
       "0      1          10    48067  ...        0          0       0        0   \n",
       "1      1          10    48067  ...        0          0       0        1   \n",
       "2      1          10    48067  ...        0          0       0        0   \n",
       "3      1          10    48067  ...        1          0       0        0   \n",
       "4      1          10    48067  ...        0          0       0        0   \n",
       "..   ...         ...      ...  ...      ...        ...     ...      ...   \n",
       "495   35           1    95370  ...        0          0       0        0   \n",
       "496   35           1    95370  ...        0          0       0        0   \n",
       "497   35           1    95370  ...        0          0       0        0   \n",
       "498   35           1    95370  ...        0          0       0        0   \n",
       "499   35           1    95370  ...        0          0       0        0   \n",
       "\n",
       "     Mystery  Romance  Sci-Fi  Thriller  War  Western  \n",
       "0          0        0       0         0    0        0  \n",
       "1          0        1       0         0    0        0  \n",
       "2          0        0       0         0    0        0  \n",
       "3          0        0       1         0    0        0  \n",
       "4          0        0       0         0    1        0  \n",
       "..       ...      ...     ...       ...  ...      ...  \n",
       "495        0        1       0         0    0        0  \n",
       "496        0        0       0         0    0        0  \n",
       "497        0        0       1         1    1        0  \n",
       "498        0        0       0         0    0        1  \n",
       "499        0        0       0         0    0        0  \n",
       "\n",
       "[500 rows x 28 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(500, 28)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MovieID', 'Title', 'Genres', 'UserID', 'Rating', 'Timestamp', 'Gender',\n",
       "       'Age', 'Occupation', 'Zip-Code', 'Action', 'Adventure', 'Animation',\n",
       "       'Children's', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy',\n",
       "       'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi',\n",
       "       'Thriller', 'War', 'Western'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ML- Predictive analysis-- \n",
    "### supervised data- output label is present--classification(we have class and answer in yes or no),Regression- continuous value-salary,profit,temp,run"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### unsupervised-group all- clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#prepare data\n",
    "X=new_data[['MovieID','Age','Occupation','Gender']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MovieID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>260</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>527</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>1197</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>1198</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>1200</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1201</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1203</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     MovieID  Age  Occupation Gender\n",
       "0          1    1          10      1\n",
       "1         48    1          10      1\n",
       "2        150    1          10      1\n",
       "3        260    1          10      1\n",
       "4        527    1          10      1\n",
       "..       ...  ...         ...    ...\n",
       "495     1197   35           1      1\n",
       "496     1198   35           1      1\n",
       "497     1200   35           1      1\n",
       "498     1201   35           1      1\n",
       "499     1203   35           1      1\n",
       "\n",
       "[500 rows x 4 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X['Gender']=X['Gender'].replace('M','0')\n",
    "X['Gender']=X['Gender'].replace('F','1')\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MovieID        int64\n",
       "Age            int64\n",
       "Occupation     int64\n",
       "Gender        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "X['Gender']=X['Gender'].astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   1,    1,   10,    1],\n",
       "       [  48,    1,   10,    1],\n",
       "       [ 150,    1,   10,    1],\n",
       "       ...,\n",
       "       [1200,   35,    1,    1],\n",
       "       [1201,   35,    1,    1],\n",
       "       [1203,   35,    1,    1]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=X.values\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [2],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [1],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [2],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [2],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [2],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [2],\n",
       "       [4],\n",
       "       [2],\n",
       "       [3],\n",
       "       [5],\n",
       "       [2],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [2],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [2],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [2],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [2],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [2],\n",
       "       [4],\n",
       "       [2],\n",
       "       [2],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [2],\n",
       "       [4],\n",
       "       [2],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [2],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [2],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [2],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [2],\n",
       "       [3]])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label=new_data[['Rating']].values\n",
    "label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating train data & test data\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,label,test_size=0.20,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 4)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 4)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Apply linear regression\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lr=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3.46596348],\n",
       "       [3.96471588],\n",
       "       [4.31047093],\n",
       "       [3.99788954],\n",
       "       [3.68849118],\n",
       "       [4.27254115],\n",
       "       [4.30172875],\n",
       "       [4.05316268],\n",
       "       [4.02252707],\n",
       "       [4.18751639],\n",
       "       [4.2936504 ],\n",
       "       [3.81923886],\n",
       "       [4.26506799],\n",
       "       [3.90352061],\n",
       "       [4.31625205],\n",
       "       [4.28057831],\n",
       "       [4.14845859],\n",
       "       [4.13671417],\n",
       "       [3.75346841],\n",
       "       [4.24955767],\n",
       "       [4.15804678],\n",
       "       [4.15720077],\n",
       "       [3.90518754],\n",
       "       [3.49627911],\n",
       "       [3.96076779],\n",
       "       [4.18032524],\n",
       "       [4.14803558],\n",
       "       [3.7680548 ],\n",
       "       [3.75335251],\n",
       "       [3.65335635],\n",
       "       [4.17130106],\n",
       "       [3.64912626],\n",
       "       [4.19047745],\n",
       "       [3.92527304],\n",
       "       [4.35822974],\n",
       "       [3.65561239],\n",
       "       [4.24391756],\n",
       "       [3.97811115],\n",
       "       [3.78314211],\n",
       "       [4.05270169],\n",
       "       [4.28791046],\n",
       "       [3.82230294],\n",
       "       [4.16199486],\n",
       "       [3.84659342],\n",
       "       [4.10287347],\n",
       "       [3.95963977],\n",
       "       [4.37923917],\n",
       "       [4.27785808],\n",
       "       [4.23954647],\n",
       "       [4.2111637 ],\n",
       "       [3.97698313],\n",
       "       [3.86196274],\n",
       "       [4.04822758],\n",
       "       [4.24293053],\n",
       "       [3.82022588],\n",
       "       [4.10191171],\n",
       "       [4.01354086],\n",
       "       [4.23442918],\n",
       "       [3.80866364],\n",
       "       [3.95329464],\n",
       "       [4.14859959],\n",
       "       [3.55584542],\n",
       "       [3.73415101],\n",
       "       [4.16340489],\n",
       "       [3.9514616 ],\n",
       "       [4.04943336],\n",
       "       [4.18709338],\n",
       "       [3.98499503],\n",
       "       [3.6421392 ],\n",
       "       [4.27747625],\n",
       "       [3.51785255],\n",
       "       [3.58736699],\n",
       "       [3.91646778],\n",
       "       [3.86711676],\n",
       "       [3.74881532],\n",
       "       [3.80296043],\n",
       "       [3.95566659],\n",
       "       [3.98854537],\n",
       "       [4.18497834],\n",
       "       [4.17398011],\n",
       "       [4.00014559],\n",
       "       [3.92396604],\n",
       "       [4.16791699],\n",
       "       [3.94882053],\n",
       "       [3.73965013],\n",
       "       [3.83217314],\n",
       "       [3.87366598],\n",
       "       [4.24067449],\n",
       "       [3.77292682],\n",
       "       [3.91237869],\n",
       "       [4.29185854],\n",
       "       [4.17200607],\n",
       "       [3.45270921],\n",
       "       [3.72625485],\n",
       "       [4.2121919 ],\n",
       "       [3.53308087],\n",
       "       [3.88547224],\n",
       "       [3.96147281],\n",
       "       [4.19625857],\n",
       "       [4.2497985 ]])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#predicted data\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [2],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [3],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [5],\n",
       "       [5],\n",
       "       [4],\n",
       "       [3],\n",
       "       [5],\n",
       "       [2],\n",
       "       [3],\n",
       "       [3],\n",
       "       [4],\n",
       "       [5],\n",
       "       [4],\n",
       "       [4],\n",
       "       [4],\n",
       "       [3],\n",
       "       [4]])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Actual data\n",
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### from this we can depict that the predicted data is somewhat similar to th actual data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error 0.6489142338657047\n"
     ]
    }
   ],
   "source": [
    "# create error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "print('Mean Squared Error',mean_squared_error(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### So, using the mean squarred error we can say that the model have 64% of error with the actual data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
